from pathlib import Path
import MDAnalysis as mda
import numpy as np


def MDAToData(u, ouputPath, center=True):
    '''

    Example:
    >>> u = mda.Universe.empty( ...
    >>> bonds = mda.topology.guessers.guess_bonds(u.atoms, u.atoms.positions)
    >>> u.add_TopologyAttr('bonds', bonds)
    >>> angles = mda.topology.guessers.guess_angles(u.bonds)
    >>> u.add_TopologyAttr('angles', angles)
    >>> MDAToData(u, 'myLammpsFile.data')
    '''
    with Path(ouputPath).open('w') as f:
        f.write("Lammps data file generated by pyMDAToData\n")
        f.write("\n")

        f.write(f"{len(u.atoms)} atoms\n")
        dic_n = {}
        for key in ['bonds', 'angles', 'dihedrals', 'impropers']:
            try:
                n = len(getattr(u, key))
            except:
                n = 0
            f.write(f"{n} {key}\n")
            dic_n[key] = n
        f.write("\n")

        n_types = len(np.unique(u.atoms.types))
        f.write(f"{n_types} atom types\n")
        for key in ['bonds', 'angles', 'dihedrals', 'impropers']:
            try:
                n_types = len(getattr(u, key).types())
            except:
                n_types = 0
            f.write(f"{n_types} {key[:-1]} types\n")
        f.write("\n")

        if center:
            xlo, ylo, zlo = u.atoms.positions.min(axis=0)
            xhi, yhi, zhi = u.dimensions[:3]+u.atoms.positions.min(axis=0)
        else:
            xlo, ylo, zlo = 0., 0., 0.
            xhi, yhi, zhi = u.dimensions[:3]
        f.write(f"{xlo:.6f} {xhi:.6f} xlo xhi\n")
        f.write(f"{ylo:.6f} {yhi:.6f} ylo yhi\n")
        f.write(f"{zlo:.6f} {zhi:.6f} zlo zhi\n")
        f.write("\n")

        f.write("Atoms\n\n")
        uniques_id = list(np.unique(u.atoms.types))
        types_id={}
        index = 1
        if 'H' in uniques_id:
            types_id['H'] = index 
            uniques_id.remove('H')
            index += 1
        if 'O' in uniques_id:
            types_id['O'] = index
            uniques_id.remove('O')
            index += 1
        for unique_id in uniques_id:
            types_id[unique_id] = index
            index += 1
        for i, atom in enumerate(u.atoms):
            x, y, z = atom.position
            n = atom.type
            charge = atom.charge
            f.write(
                f"  {i+1} {atom.resid} {types_id[n]} {charge:.8f} {x:.8f} {y:.8f} {z:.8f}\n")

        if dic_n['bonds'] != 0:
            f.write("\n")
            f.write("Bonds\n\n")
            types_id = dict(zip(u.bonds.types(), np.arange(dic_n['bonds'])+1))
            for i, bond in enumerate(u.bonds):
                i1, i2 = bond.indices + 1
                f.write(f"  {i+1} {types_id[bond.type]} {i1} {i2}\n")

        if dic_n['angles'] != 0:
            f.write("\n")
            f.write("Angles\n\n")
            types_id = dict(
                zip(u.angles.types(), np.arange(dic_n['angles'])+1))
            for i, angle in enumerate(u.angles):
                i1, i2, i3 = angle.indices + 1
                f.write(f"  {i+1} {types_id[angle.type]} {i1} {i2} {i3}\n")

        if dic_n['dihedrals'] != 0:
            f.write("\n")
            f.write("Dihedrals\n\n")
            types_id = dict(
                zip(u.dihedrals.types(), np.arange(dic_n['dihedrals'])+1))
            for i, dihedral in enumerate(u.dihedrals):
                i1, i2, i3, i4 = dihedral.indices + 1
                f.write(
                    f"  {i+1} {types_id[dihedral.type]} {i1} {i2} {i3} {i4}\n")

        if dic_n['impropers'] != 0:
            f.write("\n")
            f.write("Impropers\n\n")
            types_id = dict(
                zip(u.impropers.types(), np.arange(dic_n['impropers'])+1))
            for i, improper in enumerate(u.impropers):
                i1, i2, i3, i4 = improper.indices + 1
                f.write(
                    f"  {i+1} {types_id[improper.type]} {i1} {i2} {i3} {i4}\n")
